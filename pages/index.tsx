/* eslint-disable @next/next/no-img-element */
import { Listbox, Transition } from "@headlessui/react";
import axios from "axios";
import Head from "next/head";
import { Fragment, useEffect, useState } from "react";
import { CheckIcon, ChevronUpDownIcon } from "@heroicons/react/20/solid";
import { useRouter } from "next/router";
import CatList from "../components/CatList";

interface Breed {
  id: string;
  breedName: string;
}

export interface Cat {
  id: string;
  url: string;
}

function classNames(...classes: string[]) {
  return classes.filter(Boolean).join(" ");
}

export default function Home({ breeds }: { breeds: Breed[] }) {
  const router = useRouter();
  const [selectedBreed, setSelectedBreed] = useState<Breed | null>(null);
  const [cats, setCats] = useState<Cat[]>([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const getCats = async (breed: any, pageNo = 1) => {
    if (breed === selectedBreed?.id) {
      return;
    }

    try {
      setLoading(true);
      setCats([]);
      const res = await axios.get(
        `https://api.thecatapi.com/v1/images/search?page=${pageNo}&limit=10&breed_id=${breed}`
      );
      setCats(res.data);
      setHasMore(res.data.length >= 10);
      setLoading(false);
    } catch (error) {
      setLoading(false);
      alert(
        "Apologies but we could not load new cats for you at this time! Miau!"
      );
    }
  };

  const changeBreed = (breed: Breed) => {
    setSelectedBreed(breed);
    setPage(1);
    getCats(breed.id);
  };

  const loadMore = async () => {
    try {
      setLoading(true);
      const pageNo = page + 1;
      const res = await axios.get(
        `https://api.thecatapi.com/v1/images/search?page=${pageNo}&limit=10&breed_id=${selectedBreed?.id}`
      );

      const filterResult = res.data.filter((d: any) => {
        if (cats.find((cat) => cat.id === d.id)) {
          return false;
        }
        return true;
      });
      setCats([...cats, ...filterResult]);
      setPage(page + 1);
      setHasMore(filterResult.length !== 0);
      setLoading(false);
    } catch (error) {
      setLoading(false);
      alert(
        "Apologies but we could not load new cats for you at this time! Miau!"
      );
    }
  };

  useEffect(() => {
    const { breed } = router.query;
    let breedQuery = breed;
    if (breed instanceof Array) {
      breedQuery = breed.join();
    }
    if (breed !== undefined) {
      const breedSelected = breeds.find(
        (breedData: Breed) => breedData.id === breedQuery
      );

      if (breedSelected) {
        getCats(breed);
        setSelectedBreed(breedSelected);
      }
    }
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className=" max-w-7xl mx-auto p-4 sm:px-6 md:px-8">
          <h1 className="text-4xl mb-4">Cat Browser</h1>
          <div>
            <Listbox value={selectedBreed} onChange={changeBreed}>
              {({ open }) => (
                <>
                  <Listbox.Label className="block text-sm font-medium text-gray-700">
                    Breed
                  </Listbox.Label>
                  <div className="relative mt-1 w-1/5">
                    <Listbox.Button
                      disabled={true}
                      className="relative w-full cursor-default rounded-md border border-gray-300 bg-white py-2 pl-3 pr-10 text-left shadow-sm hover:disabled:cursor-not-allowed focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 sm:text-sm"
                    >
                      {selectedBreed ? (
                        <span className="ml-3 block truncate">
                          {selectedBreed.breedName}
                        </span>
                      ) : (
                        <span className="ml-3 block truncate text-gray-300">
                          {breeds.length > 0
                            ? "Select breed"
                            : " No breeds available"}
                        </span>
                      )}

                      <span className="pointer-events-none absolute inset-y-0 right-0 ml-3 flex items-center pr-2">
                        <ChevronUpDownIcon
                          className="h-5 w-5 text-gray-400"
                          aria-hidden="true"
                        />
                      </span>
                    </Listbox.Button>

                    {breeds.length > 0 && (
                      <Transition
                        show={open}
                        as={Fragment}
                        leave="transition ease-in duration-100"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                      >
                        <Listbox.Options className="absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                          {breeds.map((breed: Breed) => (
                            <Listbox.Option
                              key={breed.id}
                              className={({ active }) =>
                                classNames(
                                  active
                                    ? "text-white bg-cyan-600"
                                    : "text-gray-900",
                                  "relative cursor-default select-none py-2 pl-3 pr-9"
                                )
                              }
                              value={breed}
                            >
                              {({ selected, active }) => (
                                <>
                                  <div className="flex items-center">
                                    <span
                                      className={classNames(
                                        selected
                                          ? "font-semibold"
                                          : "font-normal",
                                        "ml-3 block truncate"
                                      )}
                                    >
                                      {breed.breedName}
                                    </span>
                                  </div>

                                  {selected ? (
                                    <span
                                      className={classNames(
                                        active ? "text-white" : "text-cyan-600",
                                        "absolute inset-y-0 right-0 flex items-center pr-4"
                                      )}
                                    >
                                      <CheckIcon
                                        className="h-5 w-5"
                                        aria-hidden="true"
                                      />
                                    </span>
                                  ) : null}
                                </>
                              )}
                            </Listbox.Option>
                          ))}
                        </Listbox.Options>
                      </Transition>
                    )}
                  </div>
                </>
              )}
            </Listbox>
          </div>
          <div className="my-4">
            {cats.length ? (
              <CatList data={cats} />
            ) : (
              <span className={loading ? "hidden" : "block"}>
                No cats available
              </span>
            )}
          </div>
          {loading && <div>Loading...</div>}
          {hasMore && selectedBreed !== null && (
            <button
              onClick={() => loadMore()}
              disabled={loading}
              className="rounded-md border border-transparent bg-cyan-600 py-2 px-4 text-sm font-medium text-white disabled:opacity-70 disabled:cursor-not-allowed hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2"
            >
              Load More
            </button>
          )}
        </div>
      </main>
    </div>
  );
}

export const getServerSideProps = async () => {
  try {
    const res = await axios.get("https://api.thecatapi.com/v1/breeds");
    const data: Breed[] = res.data.map((breed: any) => ({
      id: breed.id,
      breedName: breed.name,
    }));
    return {
      props: { breeds: data }, // will be passed to the page component as props
    };
  } catch (error) {}

  return {
    props: { breeds: [] }, // will be passed to the page component as props
  };
};
